###
## Johnny C's tmux config: 2019-12-20: 
## Target: 
##
## Reload tmux configuration 
###


# Set prefix to Ctrl-Space
unbind C-b
set -g prefix C-Space
bind Space send-prefix

bind c new-window -c "#{pane_current_path}"    #// 'C'reate new windows now preservers cwd




# ==========================
# ===  General settings  ===
# ==========================

set -g default-terminal "screen-256color"
set -g history-limit 20000
set -g buffer-limit 20
set -sg escape-time 0
set -g display-time 1500


## Broken.
##unbind C-r
##bind C-r source-file ~/tmux_2021.conf \; display "Config (-2021) reloaded"

## XXX
## Todo: Figure out a Prompt to jump to window after ctrl-'#' is hit. (similar to below, from tmuxx-fancy)
## set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'


###Get basic vi bindings### 
set-window-option -g mode-keys vi

## rebind the split commands to something more intuitive
unbind % 
bind | split-window -h
bind - split-window -v

## Hitting 'A' top ren(A)me windows is just muscle memory from screen
## No need to fight it.
unbind ,
bind-key          A command-prompt -I "#W" 'rename-window %%'

## Hitting '$' is completely context-less. How about 'S' for 'rename-(S)ession'
## This also has the nice feature of being the inverse of 's' 'choose-(s)ession'
unbind '$'
bind-key          S command-prompt -I "" 'rename-session %%'

# Enable mouse support (toggle with M/m below)
set -g mouse off

#Cut and paste! (tmux internal)
#unbind p
#bind p paste-buffer
#bind-key -t vi-copy 'v' begin-selection
#bind-key -t vi-copy 'y' copy-selection


## Hitting 'q' to see the pane numbers is context-less. How about '#'
unbind 'q'
bind-key '#' display-panes

## 'Hit 'j' to (J)ump to a given pane no
bind-key          j command-prompt -I "" 'select-pane -t  %%'

## Elite short-cut. Since your had is probably just on top of '#' to get
## the pane id. set '3' to change it as well.
## Todo: Figure out how to auto-prompt for pane # after display-panes runs 
bind-key          3 command-prompt -I "" 'select-pane -t  %%'

## Ctrl TAB ~ alt-tab behavior
##bind-key          tab  select-pane -t :.-
bind -r Tab last-window   # cycle thru MRU tabs


## Arrow keys can be used in two manners. 
## In the first case we use them exclusively to naviate panes.
## We do this by using the (currently) undocumented ':' target for select-pane
## which conveniently refers to the one with the current focus..
#bind-key          up    select-pane -U -t :
#bind-key          down  select-pane -D -t :
#bind-key          left  select-pane -L -t :
#bind-key          right select-pane -R -t :
##While the previous setup is very intuitive, realistically we dont need to navigate through
##panes with that much directional precision.

##It turns out that it is more effiecent to just use up/down to go to next/prev panes
##while freeing up left/right for windows..This lets you quickly go through all the panes
##without having to navigate the directional carefulle.
## we map these left left/right
bind-key left  previous-window 
bind-key right next-window 
bind-key up   select-pane -t :.-
bind-key down   select-pane -t :.+

##Resizing panes is handy sometimes.
bind-key -r   '<'   resize-pane -D 5
bind-key -r   '>'   resize-pane -U 5
##Its a strech, but think of the slashes pointing the way the window should grow
bind-key -r   '/'   resize-pane -R 5
bind-key -r   "\\"   resize-pane -L 5

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down


# Detach from session
# 
# 'd' detach as normal. 'D' Detaches _other_ users
bind d detach  

bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'


## Take care of some housekeeping before getting on to colors on the status bar###
## (These are session  variables, hence the set -g)
set -g base-index 1
set -g pane-base-index 1
set -g status-keys vi
##We'd rather name our windows ourselves..
set -g allow-rename off

## We might not want this on embedded boxes.
## Or do we just ant to make them havea 256 color termcap entry?
#TERM=screen-256color
#TERM=linux
set-option -g default-terminal xterm-256color

set -g history-limit 1000
## that covers the last of the little quirks. Now for the color scheme 


######
# general status bar settings
set -g status on
set -g status-interval 5
set -g status-position bottom 
set -g status-justify left
set -g status-left-length 30
set -g status-right-length 20
######



# THEME

wg_is_zoomed="#[fg=$color_dark,bg=$color_secondary]#{?window_zoomed_flag,[Z],[ ]}#[default]"

set -g status-interval 2
set -g status-bg black
set -g status-fg green
set -g status-left-length 30

#set -g status-right 'RrrR2021'
set -g status-left  " $wg_is_zoomed #[fg=white](#S) |#I.#P| #[fg=green]#H#[default]"
#set -g status-left "$wg_is_zoomed $wg_session"

##set -g status-right  '#[fg=white](#S) |#I.#P| #[fg=green]#H#[default]'

#set-window-option -g window-status-current-bg red
#set-window-option -g window-status-fg blue

#set-window-option -g window-status-current-fg cyan XXX
set -g window-status-current-format  '[#I:#W]'  #Mono-spaced winow names. Selected has '[''s around
set -g window-status-format          ' #I:#W '

#Automatic renaming sounds great, till you try it for a while..
set-window-option -g automatic-rename off

